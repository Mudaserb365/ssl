apiVersion: v1
kind: ConfigMap
metadata:
  name: ca-certificates
  namespace: default
data:
  ca-certificates.crt: |
    # Content of your standard trust store
    # Replace this with your actual certificates
    -----BEGIN CERTIFICATE-----
    MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/
    MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT
    DkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow
    PzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD
    Ew5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
    AN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O
    rz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq
    OLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b
    xiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw
    7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD
    aeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV
    HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG
    SIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69
    ikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr
    AvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz
    R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5
    JDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo
    Ob8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ
    -----END CERTIFICATE-----

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: trust-store-init-script
  namespace: default
data:
  init.sh: |
    #!/bin/bash
    set -e
    
    # Copy certificates to the appropriate location
    cp /ca-certificates/ca-certificates.crt /etc/ssl/certs/
    
    # Update system CA certificates
    if command -v update-ca-certificates &> /dev/null; then
      update-ca-certificates
    elif command -v update-ca-trust &> /dev/null; then
      update-ca-trust
    else
      echo "Warning: Could not update system CA certificates"
    fi
    
    # For Java applications, create a JKS trust store
    if command -v keytool &> /dev/null; then
      # Create a temporary directory
      TEMP_DIR=$(mktemp -d)
      
      # Extract each certificate to a separate file
      csplit -z -f "$TEMP_DIR/cert-" /ca-certificates/ca-certificates.crt '/-----BEGIN CERTIFICATE-----/' '{*}'
      
      # Create a new JKS trust store
      for cert_file in "$TEMP_DIR"/cert-*; do
        if [ -s "$cert_file" ]; then
          # Generate a unique alias for each certificate
          alias="cert-$(basename "$cert_file" | md5sum | cut -d' ' -f1)"
          
          # Import the certificate into the JKS trust store
          keytool -importcert -noprompt -keystore /etc/ssl/certs/cacerts -storepass changeit \
            -alias "$alias" -file "$cert_file" || true
        fi
      done
      
      # Clean up
      rm -rf "$TEMP_DIR"
    fi
    
    # For Node.js applications
    echo "NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt" > /etc/environment
    
    # For Python/Ruby/Go applications
    echo "SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt" >> /etc/environment
    
    echo "Trust store initialization completed"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: example-app
  template:
    metadata:
      labels:
        app: example-app
    spec:
      initContainers:
      - name: trust-store-init
        image: ubuntu:20.04
        command: ["/bin/bash", "/scripts/init.sh"]
        volumeMounts:
        - name: ca-certificates-volume
          mountPath: /ca-certificates
        - name: init-script-volume
          mountPath: /scripts
        - name: ssl-certs
          mountPath: /etc/ssl/certs
      containers:
      - name: app
        image: your-app-image:latest
        env:
        - name: NODE_EXTRA_CA_CERTS
          value: /etc/ssl/certs/ca-certificates.crt
        - name: SSL_CERT_FILE
          value: /etc/ssl/certs/ca-certificates.crt
        volumeMounts:
        - name: ssl-certs
          mountPath: /etc/ssl/certs
      volumes:
      - name: ca-certificates-volume
        configMap:
          name: ca-certificates
      - name: init-script-volume
        configMap:
          name: trust-store-init-script
          defaultMode: 0755
      - name: ssl-certs
        emptyDir: {}

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: trust-store-updater
  namespace: default
spec:
  schedule: "0 0 * * 0"  # Weekly at midnight on Sunday
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: trust-store-updater
            image: ubuntu:20.04
            command:
            - /bin/bash
            - -c
            - |
              apt-get update && apt-get install -y curl
              
              # Download the latest trust store
              curl -s -o /tmp/ca-certificates.crt https://your-central-location.com/trust-stores/standard-trust-store.pem
              
              # Update the ConfigMap
              kubectl create configmap ca-certificates --from-file=/tmp/ca-certificates.crt -o yaml --dry-run=client | kubectl apply -f -
              
              # Restart deployments to pick up the new certificates
              kubectl rollout restart deployment/example-app
            volumeMounts:
            - name: kube-config
              mountPath: /root/.kube
          volumes:
          - name: kube-config
            secret:
              secretName: kube-config
          restartPolicy: OnFailure 